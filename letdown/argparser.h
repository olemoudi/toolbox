/*
 * ARGPARSER.H
 * Some utilities and parsers...
 *
 * Copyright (C) 2009  Acri Emanuele <crossbower@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __ARGPARSER_H__
#define __ARGPARSER_H__

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <getopt.h>
#include <regex.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#include <time.h>

#include <string>

#define VERSION "v0.7.6"
#define AUTHOR "Acri Emanuele (crossbower@gmail.com)"

#define MIN_ARG 128
#define MAX_ARG 2048

#define IPTABLES_ENABLE  "iptables -A OUTPUT -p tcp --tcp-flags ALL RST -j DROP"
#define IPTABLES_DISABLE "iptables -D OUTPUT -p tcp --tcp-flags ALL RST -j DROP"

#define BLACKHOLE_ENABLE  "sysctl net.inet.tcp.blackhole=2"
#define BLACKHOLE_DISABLE "sysctl net.inet.tcp.blackhole=0"

/*
 * Options structure
 */
struct options {
    int dport;    // destination port
    int xport;    // first source port
    int yport;    // last source port
    int time;     // sleep time
    int alarm;    // alarm time
    int window;   // tcp window size
    int frag;     // fragment offset
    int fragc;    // fragment counter

    int ipver;    // ip version

    int syn:1;    // only syn flood
    int ack:1;    // send acknowledgment packets
    int fin:1;    // send finalize packets
    int rst:1;    // send reset packets
    int mlt:1;    // multistage payload
    int loop:1;   // infinite loop

    int verbose;                  // verbosity

    char dstaddr[MIN_ARG];        // destination address
    char srcaddr[MIN_ARG];        // source address
    char device[MIN_ARG];         // network interface

    char firewall[2][MAX_ARG];    // firewall rules

    char payload[MAX_ARG*4];      // payload
    char mlt_payload[MAX_ARG];    // multistage payload

    // utilities...

    /*
     * Is destination address set?
     */
    int dstaddr_set() {
        return (dstaddr[0]!='\0' ? 1 : 0);
    }

    /*
     * Is source address set?
     */
    int srcaddr_set() {
        return (srcaddr[0]!='\0' ? 1 : 0);
    }

    /*
     * Is device set?
     */
    int device_set() {
        return (device[0]!='\0' ? 1 : 0);
    }

    /*
     * Are firewall rules set?
     */
    int firewall_set() {
        return (firewall[0][0]!='\0' ? 1 : 0);
    }

    /*
     * Is payload set?
     */
    int payload_set() {
        return (payload[0]!='\0' ? 1 : 0);
    }

    /*
     * Is multistage payload set?
     */
    int mlt_payload_set() {
        return (mlt_payload[0]!='\0' ? 1 : 0);
    }
};
#define VER_IPV4 4
#define VER_IPV6 6

// option structure
extern struct options progopt;

/*
 * Global variables used only by argparser.cpp
 */
#ifdef ARGPARSER_CPP

    /*
     * Program usage
     */
    const char *usage_text =
            "\nLetDown 3wh+payload flooder " VERSION " - " AUTHOR "\n" \
            "Usage:\n" \
            "  letdown -d destination ip -p port [options]\n" \
            "Options:\n" \
            "  -d\tdestination ip address or dns name, target\n" \
            "  -p\tdestination port\n" \
            "  -s\tsource ip address\n" \
            "  -x\tfirst source port (default 1025)\n" \
            "  -y\tlast source port (default 65534)\n" \
            "  -l\tenables infinite loop mode\n"
            "  -i\tnetwork interface\n" \
            "  -t\tsleep time in microseconds (default 10000)\n" \
            "  -a\tmax time in second for waiting responses (default 40)\n" \
            "Extra options:\n" \
            "  -v\tverbosity level (0=quiet, 1=normal, 2=verbose)\n"
            "  -f\tautomagically set firewall rules for blocking\n" \
            "    \trst packet generated by the kernel\n"
            "    \texamples: -f iptables, -f blackhole (for freebsd)\n" \
            "  -L\tspecial interaction levels with the target\n" \
            "    \ts  syn flooding, no 3-way-handshake\n" \
            "    \ta  send acknowledgment packets (polite mode)\n" \
            "    \tf  send finalize packets (include polite mode)\n" \
            "    \tr  send reset packets (check firewall rules...)\n" \
            "  -W\twindow size for ack packets (ex: 0-window attack)\n" \
            "  -O\tenable ack fragmentation and set fragment offset delta\n" \
            "  -C\tfragment counter if fragmentation is enabled (default 1)\n" \
            "  -P\tpayload file (see payloads directory...)\n" \
            "  -M\tmultistage payload file (see payloads directory...)\n";

    /*
     * Regular expression used by
     * parseopt() function
     */
    const char *reg_ipv4_range =
        "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}[-][0-9]{1,3}$";

    const char *reg_ipv4_addr =
        "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$";

    const char *reg_ipv6_range =
        "^[0-9a-fA-F:]{1,42}[-][0-9a-fA-F]{1,4}$";

    const char *reg_ipv6_addr =
        "^[0-9a-fA-F:]{1,42}$";

    const char *reg_number =
        "\\d+?";

#endif /* ARGPARSER_CPP */

/*
 * Print the error on stderr and exit
 */
void p_error(const char *);

/*
 * Program usage.
 * First pararameter can be stdout or stderr
 * Second parameter is the error message or NULL
 */
void usage(FILE *, const char *);

/*
 * Regular expression matching function
 * Returns:
 *    -1  error on pattern compilation
 *     0  don't match
 *     1  match
 */
int regmatch(const char *, const char *);

/*
 * Check verbosity
 */
int verbosity(int);

/*
 * Print time
 */
void printtime();

/*
 * Get simple payload from file
 */
int getpayload(const char *);

/*
 * Parser for command line options
 * See getopt(3)...
 */
int parseopt(int, char **);

#endif /* __ARGPARSER_H__ */
